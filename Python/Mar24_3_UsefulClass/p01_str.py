# Python은 다 객체
a = "그러니까 이모양임"
print(a)
print(type(a)) # class 확인, 자료형은 object
print(id(a)) # 객체 있는 heap 영역 주소값

# 문자열을 그대로 나오게 할 때, 
b = """이렇게도 가능한디요
이런식으로 쓰면
줄도 바꿀 수 있고
하여튼"""

print(b)

'''
이것도 주석이래.
이런식으로 해놓은 것도 주석?
'''

10
# 10이 뭐 어쨋다고

"""이렇게도 가능한디요
이런식으로 쓰면
줄도 바꿀 수 있고
하여튼"""
# 이게 뭐.

'''
주석처럼 작동은 함.

그냥 존재하는 데이터.
변수에 저장만 않한거
str을 만드는 것이기 때문에, 메모리를 먹음
'''

class Dog:
    """
    메뉴얼 공간 입니다
    """
    def bark(self):
        """
        메서드 설명 공간 입니다.
        """
        print("멍")

# 메뉴얼 보기
# help(Dog)
# help(print)

# 영어작문 + help
# Python 컨셉상
#   Hybrid OOL : 메소드 형태가 아닌것도
#   대체할 수 있으면 삭제 : 친절도가 떨어지는..

print("-----")

c = "그니까 이제 알아서 해봐요"

# c가 그니까로 시작하는지
print( c.startswith("그니까") )

# c에서 이제 -> 다음부터
c = c.replace("이제", "다음부터")
print(c)

# c에 '까'가 몇 번째에 있는지
print( c.find("까") )

# c에서 3번째 글자
print( c[2] )

# c에 '해봐요'가 있는지
print( c.find("해봐요") != -1)

# c글자 수.
print(len(c))

print("-----")

# <<= 메모리 주소가 바뀜.
# 글자 붙인다고 + 할 때마다, 
# 기존 str 객체 GC 먹여 날리고, 새로 만드는 구조
# -> 메모리를 들쑤시는..
# -> + 사용 자제.
# -? Python? 알빠노
# 자제하는게 좋은데, 여기는 파이썬.

d = "저기"
print(d, id(d))

d += "뒤에다가"
print(d, id(d))

d += "이렇게"
print(d, id(d))

# 데이터라고 받아오며누 str 한 덩어리
e = "홍길동,김길동,이길동"
e2 = e.split(",") # , 기준으로 뜯어서 list로
print(e2)

# 데이터라고 받아오면 잡다함
f = "       ㅋㅋㅋㅋㅋㅋ        "
print(f.strip()) # 쓸데없는 공백 삭제
g = "~~~~ㅎㅎㅎ~~~~"
print(g.strip("~")) # 쓸데없는 문자 삭제


