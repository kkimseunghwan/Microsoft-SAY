
# 사과 -> apple
# 삵와 -> ????
# 번역을 하려면 원본이 정상이여야 진행 가능

# compiler 방식 언어 (일반적인 프로그래밍 언어들)
# (한국어 > 번역(coding) > 프로그램 소스)프로그래밍. ==> 개발자
# 프로그램 소스 - 번역(Compile) -> 기계어 ==> 언어가 알아서
# 기계어 - 압축(packageing) -> 최종 실행 파일 ==> 게발자가 툴 써서
# 최종 실행 파일 - 실행 => 사용자
#  

# [일반적인 프로그래밍 언어 에러의 경우]
# 1) Error : 츠로그램 소스가 이상하게 되어있어서 기계어로 번역 불가능 한거.
#   compile이 불가능한거
#   최종 실행 파일이 안나옴. -> 실행 불가
#   개발자 잘못.

# 2) warning :
a = 10
b = 20
print(b)
# 불필요한 작업 or 쓰고 정리 안함 -> 지저분한 소스
# 실행 가능
# 개발자 잘못

# 3) exception
#   프로그램 완성, 실행 잘됨
#   실행할 때 뭔가 외부적 요인 때문에 정상 실행이 안되는 상황
#   개발자 잘못은 아닌데, 해결해줄 수 있는게 개발자 뿐
#   -> 개발자가 대비는 해 둘 필요가 

##########


# interpreter 방식 언어 (Python언어)
# (한국어 > 번역(coding) > 프로그램 소스)프로그래밍. ==> 개발자
# 프로그램 소스 - 실행 -> 
#   소스 한줄 기계어로 번역해서 실행하고 : 언어가 알아서
#   그 다음 줄 기계어로 번역해서 실행하고
# => 오류 시, Error/Exception 구별이 힘듬 = 에러잡기 힘듬

# Error


