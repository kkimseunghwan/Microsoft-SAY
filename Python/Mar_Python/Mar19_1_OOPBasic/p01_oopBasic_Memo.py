
# 지금까지의 수업
# PART1 : Procedural Programming
#      => 절차지향 프로그래밍
#       변수, 함수, 제어문, 등...
#       을 "최적의 순서"로 배치해서
#       프로그램을 만들자.

# 최적의 <= 뭔가 뭔가임
# 요즘 H/W 성능이 좋아져서 -> "죄적"이 그닥 중요하지 않음.
# (과거)알고리즘의 시대 =>=> (현재)유지보수의 시대. 
# 좋은 알고리즘보다는 유지보수하기 좋게 만들자. 라는 마인드.

# 유지보수하기 좋으려면?
# => 소스가 보기 쉬워야 함.
# ===> 객체지향 프로그래밍. - 패러다임이 변함.

####################

# 이제부터
# PART2 : Object Oriented Progremming
#      => 객체지향 프로그래밍
#           => 객체를 사용해서 리얼월드??를 묘사
#           => 객체 : 실생활에 존재하는거 (실존안하는 추상적인거일수도.)
#           => 객체를 만들려면 클래스가 필요함.
#               다른언어] 1class = 1file (파이썬은 안됨)
#               파이썬] 니 알아 하셈.
#               => 파이썬은 뒤에 .py를 붙여 표현
#               => 모듈 속에 class를 배치

####################

# 개 이름이 만득이
# 개 나이 3
# 얘를 저장 후 출력.

# dogName 이라는 변수 만들고, "만득이"라는 데이터를 넣었고, 파이썬이 자동으로 자료형을 str로 지정.

dogName = "만득이"
dogAge = 3

print(dogName)
print(type(dogName))
print("개 나이 %d" % dogAge)

# 리월월드에는 str? 이게 뭐임, 어떻게 생긴건데?
#  개가 존재
#   실생활에 존재하는 자료형(객체)를 만든다

# 유지보수하기 좋으려면
#   개 따로, 고양이 따로, 사자 따로 파일을 만들어서 관리.
# 개/고양이/사자 다 한 파일에 있으면, 코드 유지보수가 힘듬

print("-----")

# class : 객체를 찍는 도장 / 붕어빵틀
class dog:
    # member ???뭐시기 : 클래스 내부에서 생성되는거

    # 멤버 변수 (member variable)
    # 여태까지 쓰던 변수랑은 좀 다름.
    # 해당 객체는, 이름과 나이라는 정보를 가짐.
    name = None 
    age = None

    # 멤버 함수 (member function) : 객체의 액션 <<== 세상에 없는 말 (이해하기 편하라고)
    # == 메서드 (Method) : 객체의 기능을 구현하기 위한 "클래스 내부에 구현되는 함수"

    # 개로 치면 밥먹고 짖고 물고 하는거
    def bark(self): # 개가 짖어요
        print("멍")
    # 일반적인 함수와 다르게 매개변수가 없는 함수를 사용하기 위해서는 self를 넣여야댐. 
    # self에 대해서는 다음 시간에.

    # method : 프로그램상 필요한 기능

    # [ self. ] 
    def showInfo(self):
        print(self.name)
        print(self.age)



## 면접 기출 문제 ##
# 함수(Function) vs 메소드(Method)의 차이
# 함수 : 지금까지 늘 쓴 그거
# 메소드 : 클래스 내부에서 구현된 함수



# object/instance : 클래스라는 도장으로 짝어낸 갓. / 붕어빵.
#   =>  클래스로부터 생성된 객체
d = dog() # 함수가 아님. #dog라는 객체를 하나 만든것.
d.name = "만득이"
d.age = 3
d.bark()
d.showInfo()
print(d, type(d)) # <class '__main__.dog'>

d2 = dog() # 또 다른 개
d2.name = "춘식이"
d2.age = 2
print(d2, type(d2))


# 변수
a = 1
# 전역변수 (global variable) : 그냥 밖에 있는거.
#       global만 붙이면 아무데서나 다 쓸수 있는거 (함수에서)

# 지역변수 (local variable) : 함수 속에서 만들어진 변수
#       그 함수 속에서만 사용이 가능한 변수
#       그 함수 진행하는 동안만 쓰고 버릴거 (임시로 사용될 변수)

# 멤버 변수 (member variable) : 객체의 속성을 표현.
#   == 객체의 속성(attrivute), field 라고도 부름







