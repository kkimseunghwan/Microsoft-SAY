
# 함수 = Function
# != 메서드 Method

# 함수
# 연관된 작업 묶어서 정의해놓고
# 필요할때마다 호출해서 사용

# 다른언어 : main 함수 영역이 있음
# Python : 그딴거 없음 => "interpreter 방식 언어의 특장"
# 
# 함수 내부에 다른 함수 정의 X

# 다른 언어 : 띄어쓰기, 엔터는 무의미.
#   영역을 표시할 때, 중괄호 { } 사용

# Python : 의미 있음.
#   영역을 표시할 때, 콜론( : ) + 들여쓰기 사용

# 1) 정의
# def 함수명(변수명, 변수명, 변수명.... (Parameter 매개변수 자리)):
#   함수내용(들여쓰기)
#   함수내용(들여쓰기)
#   ...
#
# 함수밖(들여쓰기x)

# 함수명 짓는 조건은 변수명 짓는 조건과 동일한데,
# 변수 : 데이터를 담는 그릇 => 주로 명사형.
# 함수 : 작엄의 모음 => 주로 동사형.

# 함수묭

# 유지보수의 시대 -> 알파벳 순 정렬
# 동사를 앞으로 -> 기능별로 정렬 (선생님 작성 형식)
# 동사를 뒤로 -> 주제별로 정렬

def Buy_Tabaco():
    print("야 만원줄테니까 받아서")
    print("동네 슈퍼에 가서")
    print("한라산 1갑 달라고 하고")
    print("남는 돈 너 과자 사먹고")
    print("한라산은 가져와")

############################
# 함수 호출
Buy_Tabaco()
Buy_Tabaco()
Buy_Tabaco()
Buy_Tabaco()
Buy_Tabaco()

# 두 수의 합을 출력하는 함수
# 합을 구하려면 두 수가 필요함.
# 함수를 수행하는데 필요한 재료 : Parameter(매개변수), Argument(인자, 인수) 라고 불림 

def printSum(num1, num2=10):
    print(num1 + num2)

printSum(1,10)

# [ 파이썬만 있는 기능 ]

########## 파이썬의 함수 기본값 설정 ##########

# 파이썬은 함수 호출 시, 매개변수에 값을 지정해줄 수 있음
printSum(num2=30, num1=10) # 굳이 순서를 안지켜도 됨

# 함수의 기본값 시스템
# (+) 기본값 매개변수는 항상 "기본값이 없는 매개변수" 뒤에 와야 함!
# def printSum(num1, num2=10):
#     print(num1 + num2)

# num2=10 으로 값을 할당하였기 때문에, num2값을 입력하지 않을 시 할당된 기본값으로 실행됨
printSum(100) 

# print() 함수의 end 매개변수는 기본값이 "\n" (줄바꿈 문자)로 설정되어 있어서, 
# 명시적으로 값을 지정하지 않으면 자동으로 줄바꿈이 발생.
print("ABCD") 
print("EFG", end="123") # 이것도 함수 기본값에 관련된 것중 하나
print("HIJK") 

########################################

# [ 파이썬의 오버로딩 ]

# Parmeter(매개변수)의 "개수/자료형이 다르면" 함수명을 동일하게하여 정의해도 됨.
# => 함수 호출 때, 구별 가능.
# => Overloading(오버로딩) : 일부러 함수명 같게 짓는 기술명.

# Python] Parameter(매개변수) 지정가능 + 기본값 설정 가능 + 자료형 자동
# => 함수 호출 때, 구별 불가. => Overloading(오버로딩) 불가.

# 근데 파이썬에서는 오버로딩을 제공하지 않음. 함수 정의는 가능하긴 함.
# 파이썬에서는 같은 이름의 함수를 여러 번 정의하면 덮어쓰기(overwrite)가 발생.
# => 덮어쓰기 이전의 함수는 사용하지 못하게 됨.


# 세 수의 합을 출력하는 함수
def printSum(num1, num2, num3):
    print( num1 + num2 + num3 )

printSum(1, 2, 3)
# intSum(1, 2) # 사용 불가능


