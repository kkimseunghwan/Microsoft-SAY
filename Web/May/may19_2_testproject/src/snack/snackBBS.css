/* snackBBS.css */

/* 전체 영역 스타일 */
#snackArea {
    width: 80%;
    max-width: 600px; /* 최대 너비 설정 */
    margin: 40px auto; /* 페이지 중앙 정렬 및 상하 여백 */
    padding: 30px;
    background-color: #f9f9f9; /* 밝은 배경색 */
    border-radius: 12px; /* 모서리 둥글게 */
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1); /* 부드러운 그림자 효과 */
    font-family: 'Helvetica Neue', Arial, sans-serif; /* 가독성 좋은 폰트 */
    color: #333; /* 기본 텍스트 색상 */
  }
  
  /* 제목 스타일 */
  #snackArea h1 {
    text-align: center;
    color: #e8491d; /* 포인트 색상 (주황색 계열) */
    margin-bottom: 30px;
    font-size: 2.5em; /* 제목 크기 */
  }
  
  /* 입력 필드 레이블 및 입력창 정렬 */
  #snackArea > br {
    display: none; /* 불필요한 <br> 태그 숨김 */
  }
  
  #snackArea > input.txtTypeInput {
    display: block; /* 각 입력 필드를 블록 요소로 만들어 줄 바꿈 */
    width: calc(100% - 24px); /* 패딩 고려한 너비 */
    padding: 12px;
    margin-bottom: 20px; /* 입력 필드 간 간격 */
    border: 1px solid #ddd; /* 테두리 색상 */
    border-radius: 6px; /* 입력창 모서리 둥글게 */
    font-size: 1em; /* 입력창 내 텍스트 크기 */
    box-sizing: border-box; /* 패딩과 테두리를 너비에 포함 */
  }
  
  /* 입력 필드 포커스 시 스타일 */
  #snackArea > input.txtTypeInput:focus {
    border-color: #e8491d; /* 포커스 시 테두리 색상 변경 */
    outline: none; /* 기본 아웃라인 제거 */
    box-shadow: 0 0 8px rgba(232, 73, 29, 0.2); /* 포커스 시 그림자 효과 */
  }
  
  /* '이름:', '가격:' 텍스트 스타일 */
  #snackArea > label {
      display: block;
      margin-bottom: 8px;
      font-weight: bold;
      color: #555;
  }
  /* React 코드에서 input 앞에 텍스트가 직접 작성되어 있으므로, CSS로 직접 스타일링하기 어렵습니다.
     만약 '이름 :', '가격 :' 텍스트를 <label> 태그로 감싸면 아래와 같이 스타일링 가능합니다.
     예: <label htmlFor="snackName">이름 :</label><input id="snackName" ... />
  */
  /* 현재 HTML 구조에서는 JavaScript로 DOM을 조작하거나, HTML 구조를 변경해야 합니다.
     여기서는 현재 구조를 유지하며 최대한 스타일링합니다.
     input 바로 앞의 텍스트 노드를 선택하는 표준 CSS 선택자는 없습니다.
     하지만, 일반적으로는 다음과 같이 input 위에 레이블을 명시적으로 추가하는 것이 좋습니다.
  
     (예시 HTML 구조)
     <label htmlFor="snackNameInput">이름 :</label>
     <input id="snackNameInput" className="txtTypeInput" type="text" value={snackData.name} onChange={changeName} /> <br />
     <label htmlFor="snackPriceInput">가격 :</label>
     <input id="snackPriceInput" className="txtTypeInput" type="text" value={snackData.price} onChange={changePrice} /> <br />
  */
  
  /* 등록 버튼 스타일 */
  #snackArea button {
    display: block; /* 버튼을 블록 요소로 만들어 너비 100% 사용 */
    width: 100%;
    padding: 12px 20px;
    background-color: #e8491d; /* 버튼 배경색 */
    color: white; /* 버튼 텍스트 색상 */
    border: none;
    border-radius: 6px;
    font-size: 1.1em; /* 버튼 텍스트 크기 */
    cursor: pointer; /* 마우스 오버 시 커서 변경 */
    transition: background-color 0.3s ease, transform 0.1s ease; /* 부드러운 색상 및 크기 변화 */
    margin-top: 10px; /* 입력 필드와의 간격 */
  }
  
  #snackArea button:hover {
    background-color: #c33c13; /* 버튼 호버 시 배경색 변경 */
    transform: translateY(-2px); /* 살짝 위로 이동하는 효과 */
  }
  
  #snackArea button:active {
    background-color: #a0300f; /* 버튼 클릭 시 배경색 변경 */
    transform: translateY(0); /* 원래 위치로 */
  }
  
  /* 구분선 스타일 */
  #snackArea hr {
    border: none;
    border-top: 1px solid #eee; /* 연한 회색 구분선 */
    margin: 30px 0; /* 위아래 여백 */
  }
  
  /* 테이블 전체 스타일 */
  #snackBBSTable {
    width: 100%;
    border-collapse: collapse; /* 테이블 테두리 한 줄로 합치기 */
    margin-top: 20px;
    background-color: #fff; /* 테이블 배경색 */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05); /* 테이블 그림자 */
    border-radius: 8px; /* 테이블 모서리 둥글게 (overflow hidden 필요할 수 있음) */
    overflow: hidden; /* border-radius 적용을 위해 */
  }
  
  /* 테이블 헤더(th) 및 셀(td) 스타일 */
  #snackBBSTable th,
  #snackBBSTable td {
    padding: 15px; /* 셀 안쪽 여백 */
    text-align: left; /* 텍스트 왼쪽 정렬 */
    border-bottom: 1px solid #eee; /* 셀 하단 테두리 */
  }
  
  /* 테이블 헤더(th) 특정 스타일 */
  #snackBBSTable th {
    background-color: #f0f0f0; /* 헤더 배경색 */
    color: #333; /* 헤더 텍스트 색상 */
    font-weight: bold; /* 헤더 텍스트 굵게 */
    font-size: 1.05em;
  }
  
  /* 테이블 바디(tbody)의 행(tr) 스타일 - class='snackList' 사용 */
  #snackBBSTable tr.snackList {
    cursor: pointer; /* 클릭 가능함을 표시 */
    transition: background-color 0.2s ease; /* 부드러운 배경색 변화 */
  }
  
  /* 테이블 바디 행 호버 시 스타일 */
  #snackBBSTable tr.snackList:hover {
    background-color: #ffe0b2; /* 호버 시 배경색 변경 (주황색 계열 연하게) */
  }
  
  /* 테이블 첫 번째 th와 td는 왼쪽 정렬, 두 번째는 오른쪽 정렬 (가격이므로) */
  #snackBBSTable th:nth-child(1),
  #snackBBSTable td:nth-child(1) {
    text-align: left;
    width: 60%; /* 이름 칸 너비 */
  }
  
  #snackBBSTable th:nth-child(2),
  #snackBBSTable td:nth-child(2) {
    text-align: right; /* 가격 오른쪽 정렬 */
    width: 40%; /* 가격 칸 너비 */
  }
  
  /* 마지막 행의 하단 테두리 제거 (선택 사항) */
  #snackBBSTable tr:last-child td {
    border-bottom: none;
  }
  
  /* 반응형 디자인 (간단한 예시) */
  @media (max-width: 768px) {
    #snackArea {
      width: 90%;
      margin: 20px auto;
      padding: 20px;
    }
  
    #snackArea h1 {
      font-size: 2em;
    }
  
    #snackBBSTable th,
    #snackBBSTable td {
      padding: 10px;
      font-size: 0.9em;
    }
  
    #snackArea > input.txtTypeInput,
    #snackArea button {
      font-size: 0.95em;
      padding: 10px;
    }
  }
  
  @media (max-width: 480px) {
    #snackArea h1 {
      font-size: 1.8em;
    }
  
    /* 모바일에서는 테이블 헤더를 숨기고, 각 셀이 블록처럼 보이도록 할 수도 있습니다.
       하지만 현재 구조에서는 간단하게 유지합니다. */
  
    #snackBBSTable th:nth-child(2), /* 가격 헤더 */
    #snackBBSTable td:nth-child(2) { /* 가격 셀 */
      text-align: left; /* 모바일에서는 왼쪽 정렬로 통일 */
    }
  }